<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:RedSharp.Dali.Controls.Windows">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Themes/Brushes.xaml"/>
        <ResourceDictionary Source="../Themes/Paths.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <!--
        We don't need any WPF button decorations just presenter. In future we might move this to Button.xaml
        resource dictionary.
    -->
    <ControlTemplate x:Key="TitleBarButton" TargetType="Button">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}" HorizontalAlignment="Stretch">
            <ContentPresenter/>
        </Border>
    </ControlTemplate>

    <!--
        Style with common values for all toolbar buttons.
    -->
    <Style x:Key="TitleBarButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource TitleBarButtonBackgroundBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="46"/>
        <Setter Property="Height" Value="27"/>
        <Setter Property="Template" Value="{StaticResource TitleBarButton}"/>
    </Style>

    <!--
        Triggers for default buttons.
    -->
    <Style x:Key="DefaultTitleBarButtonStyle" BasedOn="{StaticResource TitleBarButtonStyle}"
           TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource TitleBarButtonHoverBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource MainTColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        Triggers for close button. With animation. As for me it's weird to have animation only for one button.
        And it might be faster. But...
        Colors are hard-coded here because we need actual color for animation. I could try to get it from resource,
        but maybe it is fine as is?
    -->
    <Style x:Key="CloseButtonStyle" BasedOn="{StaticResource TitleBarButtonStyle}" 
           TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource CloseButtonHoverBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource MainTColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        General template for all Dali windows.
    -->
    <ControlTemplate x:Key="DaliWindowTemplate" TargetType="{x:Type local:DaliWindow}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel LastChildFill="True" Background="{TemplateBinding Background}">
                <Grid x:Name="PART_TitleBar" DockPanel.Dock="Top" Height="27"
                      Visibility="{TemplateBinding IsTitleBarVisible, Converter={StaticResource BooleanToVisibilityConverter}}">

                    <DockPanel LastChildFill="True" Background="Transparent">
                        <Image DockPanel.Dock="Left" Width="16" Height="16" Source="{TemplateBinding Icon}"
                                   VerticalAlignment="Center" Margin="8,0,8,0"/>
                        <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" VerticalAlignment="Center">
                            <Button x:Name="PART_MinimizeButton" Content="{StaticResource MinimizeButtonPath}"
                                    Style="{StaticResource DefaultTitleBarButtonStyle}"
                                    Visibility="{TemplateBinding CanMinimize, Converter={StaticResource BooleanToVisibilityConverter}}"/>

                            <Button x:Name="PART_MaximizeButton" Content="{StaticResource MaximizeButtonPath}"
                                    Style="{StaticResource DefaultTitleBarButtonStyle}"
                                    Visibility="{TemplateBinding CanMaximize, Converter={StaticResource BooleanToVisibilityConverter}}"/>

                            <Button x:Name="PART_CloseButton" Content="{StaticResource CloseButtonPath}"
                                    Style="{StaticResource CloseButtonStyle}"
                                    Visibility="{TemplateBinding CanClose, Converter={StaticResource BooleanToVisibilityConverter}}"/>

                        </StackPanel>

                        <TextBlock Text="{TemplateBinding Title}" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                    </DockPanel>
                </Grid>

                <ContentPresenter Content="{TemplateBinding Content}"/>
            </DockPanel>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter TargetName="PART_MaximizeButton" Property="Content" Value="{StaticResource RestoreButtonPath}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--
        General style for all Dali windows.
    -->
    <Style TargetType="{x:Type local:DaliWindow}">
        <Setter Property="Background" Value="#FFF3F3F3"/>
        <Setter Property="BorderBrush" Value="#FF0078D7"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Template" Value="{StaticResource DaliWindowTemplate}"/>
    </Style>
</ResourceDictionary>